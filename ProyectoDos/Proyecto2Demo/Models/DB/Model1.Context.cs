//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto2Demo.Models.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SisEdutivaEntities2 : DbContext
    {
        public SisEdutivaEntities2()
            : base("name=SisEdutivaEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActivaEvaluacionCRUD> ActivaEvaluacionCRUD { get; set; }
    
        public virtual int ActualizarActivaEvaluacion(Nullable<int> idActiva, string notaCodigo, Nullable<bool> activo, Nullable<int> procesoMatricula, Nullable<int> idUsuario, Nullable<bool> visible)
        {
            var idActivaParameter = idActiva.HasValue ?
                new ObjectParameter("IdActiva", idActiva) :
                new ObjectParameter("IdActiva", typeof(int));
    
            var notaCodigoParameter = notaCodigo != null ?
                new ObjectParameter("NotaCodigo", notaCodigo) :
                new ObjectParameter("NotaCodigo", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var procesoMatriculaParameter = procesoMatricula.HasValue ?
                new ObjectParameter("ProcesoMatricula", procesoMatricula) :
                new ObjectParameter("ProcesoMatricula", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("Visible", visible) :
                new ObjectParameter("Visible", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarActivaEvaluacion", idActivaParameter, notaCodigoParameter, activoParameter, procesoMatriculaParameter, idUsuarioParameter, visibleParameter);
        }
    
        public virtual int sp_RegistrarRegistro22(string notaCodigo, Nullable<bool> activo, Nullable<int> procesoMatricula, Nullable<int> idUsuario, DateTime? fechaCreacion, Nullable<bool> visible)
        {
            var notaCodigoParameter = notaCodigo != null ?
                new ObjectParameter("NotaCodigo", notaCodigo) :
                new ObjectParameter("NotaCodigo", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var procesoMatriculaParameter = procesoMatricula.HasValue ?
                new ObjectParameter("ProcesoMatricula", procesoMatricula) :
                new ObjectParameter("ProcesoMatricula", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(int));
    
            var visibleParameter = visible.HasValue ?
                new ObjectParameter("Visible", visible) :
                new ObjectParameter("Visible", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RegistrarRegistro22", notaCodigoParameter, activoParameter, procesoMatriculaParameter, idUsuarioParameter, visibleParameter);
        }

      

        public virtual int EliminarActivaEvaluacion(Nullable<int> idActiva)
        {
            var idActivaParameter = idActiva.HasValue ?
                new ObjectParameter("IdActiva", idActiva) :
                new ObjectParameter("IdActiva", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarActivaEvaluacion", idActivaParameter);
        }
    }
}
